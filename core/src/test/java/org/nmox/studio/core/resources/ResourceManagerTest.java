package org.nmox.studio.core.resources;

import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import java.io.Closeable;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

public class ResourceManagerTest {
    
    private ResourceManager manager;
    
    @BeforeEach
    public void setUp() {
        manager = ResourceManager.getInstance();
    }
    
    @Test
    public void testRegisterResource() throws Exception {
        AtomicBoolean closed = new AtomicBoolean(false);
        
        Closeable resource = () -> closed.set(true);
        Closeable registered = manager.register(resource, "test-resource");
        
        assertSame(resource, registered);
        assertTrue(manager.hasResource("test-resource"));
        
        manager.unregister("test-resource");
        assertTrue(closed.get());
        assertFalse(manager.hasResource("test-resource"));
    }
    
    @Test
    public void testAutoGeneratedName() throws Exception {
        Closeable resource = () -> {};
        manager.register(resource);
        
        ResourceManager.ResourceStats stats = manager.getStats();
        assertTrue(stats.managedCount > 0);
    }
    
    @Test
    public void testGetResource() throws Exception {
        TestResource resource = new TestResource();
        manager.register(resource, "test-get-resource");
        
        TestResource retrieved = manager.getResource("test-get-resource", TestResource.class);
        assertNotNull(retrieved);
        assertSame(resource, retrieved);
        
        AutoCloseable asCloseable = manager.getResource("test-get-resource", AutoCloseable.class);
        assertNotNull(asCloseable);
        
        manager.unregister("test-get-resource");
    }
    
    @Test
    public void testReplaceResource() throws Exception {
        AtomicBoolean firstClosed = new AtomicBoolean(false);
        AtomicBoolean secondClosed = new AtomicBoolean(false);
        
        Closeable first = () -> firstClosed.set(true);
        Closeable second = () -> secondClosed.set(true);
        
        manager.register(first, "replaceable");
        manager.register(second, "replaceable");
        
        assertTrue(firstClosed.get());
        assertFalse(secondClosed.get());
        
        manager.unregister("replaceable");
        assertTrue(secondClosed.get());
    }
    
    @Test
    public void testCleanupAction() throws Exception {
        AtomicBoolean cleaned = new AtomicBoolean(false);
        CountDownLatch latch = new CountDownLatch(1);
        
        Object owner = new Object();
        manager.registerCleanup(owner, () -> {
            cleaned.set(true);
            latch.countDown();
        });
        
        owner = null; // Make eligible for GC
        System.gc();
        System.runFinalization();
        
        manager.forceCleanup();
        
        assertTrue(latch.await(2, TimeUnit.SECONDS));
        assertTrue(cleaned.get());
    }
    
    @Test
    public void testResourceScope() throws Exception {
        AtomicBoolean closed1 = new AtomicBoolean(false);
        AtomicBoolean closed2 = new AtomicBoolean(false);
        
        try (ResourceManager.ResourceScope scope = new ResourceManager.ResourceScope()) {
            scope.add((Closeable) () -> closed1.set(true));
            scope.add((Closeable) () -> closed2.set(true));
            
            assertFalse(closed1.get());
            assertFalse(closed2.get());
        }
        
        assertTrue(closed1.get());
        assertTrue(closed2.get());
    }
    
    @Test
    public void testCloseResourcesMatching() throws Exception {
        AtomicBoolean closed1 = new AtomicBoolean(false);
        AtomicBoolean closed2 = new AtomicBoolean(false);
        AtomicBoolean closed3 = new AtomicBoolean(false);
        
        manager.register((Closeable) () -> closed1.set(true), "test-1");
        manager.register((Closeable) () -> closed2.set(true), "test-2");
        manager.register((Closeable) () -> closed3.set(true), "other-1");
        
        manager.closeResourcesMatching("test-.*");
        
        assertTrue(closed1.get());
        assertTrue(closed2.get());
        assertFalse(closed3.get());
        
        manager.unregister("other-1");
        assertTrue(closed3.get());
    }
    
    @Test
    public void testResourceStats() throws Exception {
        int initialManaged = manager.getStats().managedCount;
        
        manager.register((Closeable) () -> {}, "stat-test-1");
        manager.register((Closeable) () -> {}, "stat-test-2");
        
        ResourceManager.ResourceStats stats = manager.getStats();
        assertEquals(initialManaged + 2, stats.managedCount);
        
        manager.unregister("stat-test-1");
        manager.unregister("stat-test-2");
        
        stats = manager.getStats();
        assertEquals(initialManaged, stats.managedCount);
    }
    
    @Test
    public void testNullHandling() {
        assertThrows(IllegalArgumentException.class, () -> manager.register(null));
        assertThrows(IllegalArgumentException.class, () -> manager.register(null, "name"));
        assertThrows(IllegalArgumentException.class, () -> manager.registerCleanup(null, () -> {}));
        assertThrows(IllegalArgumentException.class, () -> manager.registerCleanup(new Object(), null));
    }
    
    private static class TestResource implements AutoCloseable {
        boolean closed = false;
        
        @Override
        public void close() {
            closed = true;
        }
    }
}